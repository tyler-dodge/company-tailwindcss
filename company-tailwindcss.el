;;; company-tailwindcss.el --- Company mode for tailwind css suggestions -*- lexical-binding: t -*-
;; Author: Tyler Dodge
;; Version: 0.6
;; Keywords: convenience, matching
;; Package-Requires: ((emacs "26.1") (company "0.8.0") (dash "2.19.1"))
;; URL: https://github.com/tyler-dodge/company-tailwindcss
;; Git-Repository: git://github.com/tyler-dodge/company-tailwindcss.git
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;;
;;;
;;; Commentary:
;;;
;;; Code:

(require 'company)

(defcustom company-tailwindcss-complete-only-in-attributes t
  "When t, Complete only in css attribute tags.")

(defcustom company-tailwindcss-sort-post-completion t
  "When t, Sort the entire class list whenever post-completion is run.")

(defvar company-tailwindcss--keys-with-dimension-suffix
  '(
    "basis"
    "translate-x"
    "translate-y"
    "scroll-ml"
    "scroll-mt"
    "scroll-mr"
    "scroll-mb"
    "scroll-my"
    "scroll-mx"
    "scroll-m"
    "scroll-pl"
    "scroll-pt"
    "scroll-pr"
    "scroll-pb"
    "scroll-py"
    "scroll-px"
    "scroll-p"
    "inset"
    "inset-x"
    "inset-y"
    "top"
    "right"
    "left"
    "bottom"
    "pt" "pl" "pr" "pb" "py" "px" "p"
    "mt" "ml" "mr" "mb" "my" "mx" "m"
    "space-x"
    "space-y"
    "w" "h" "max-h" "indent")
  "List of tailwind css keys that have a dimension suffix")

(defvar company-tailwindcss--keys-no-suffix
  '(
    "align-baseline"
    "align-bottom"
    "align-middle"
    "align-sub"
    "align-super"
    "align-text-bottom"
    "align-text-top"
    "align-top"
    "antialiased"
    "break-all"
    "break-normal"
    "break-words"
    "capitalize"
    "content-none"
    "decoration-0"
    "decoration-1"
    "decoration-2"
    "decoration-4"
    "decoration-8"
    "decoration-auto"
    "decoration-dashed"
    "decoration-dotted"
    "decoration-double"
    "decoration-from-font"
    "decoration-solid"
    "decoration-wavy"
    "decoration-white"
    "diagonal-fractions"
    "font-black"
    "font-bold"
    "font-extrabold"
    "font-extralight"
    "font-light"
    "font-medium"
    "font-mono"
    "font-normal"
    "font-sans"
    "font-semibold"
    "font-serif"
    "font-thin"
    "italic"
    "leading-10"
    "leading-3"
    "leading-4"
    "leading-5"
    "leading-6"
    "leading-7"
    "leading-8"
    "leading-9"
    "leading-loose"
    "leading-none"
    "leading-normal"
    "leading-relaxed"
    "leading-snug"
    "leading-tight"
    "line-through"
    "lining-nums"
    "list-decimal"
    "list-disc"
    "list-inside"
    "list-none"
    "list-outside"
    "lowercase"
    "max-w-0"
    "max-w-2xl"
    "max-w-3xl"
    "max-w-4xl"
    "max-w-5xl"
    "max-w-6xl"
    "max-w-7xl"
    "max-w-fit"
    "max-w-full"
    "max-w-lg"
    "max-w-max"
    "max-w-md"
    "max-w-min"
    "max-w-none"
    "max-w-prose"
    "max-w-screen-2xl"
    "max-w-screen-lg"
    "max-w-screen-md"
    "max-w-screen-sm"
    "max-w-screen-xl"
    "max-w-sm"
    "max-w-xl"
    "max-w-xs"
    "min-h-0"
    "min-h-fit"
    "min-h-full"
    "min-h-max"
    "min-h-min"
    "min-h-screen"
    "min-w-0"
    "min-w-fit"
    "min-w-full"
    "min-w-max"
    "min-w-min"
    "no-underline"
    "normal-case"
    "normal-nums"
    "not-italic"
    "oldstyle-nums"
    "ordinal"
    "overline"
    "proportional-nums"
    "slashed-zero"
    "stacked-fractions"
    "subpixel-antialiased"
    "tabular-nums"
    "text-2xl"
    "text-3xl"
    "text-4xl"
    "text-5xl"
    "text-6xl"
    "text-7xl"
    "text-8xl"
    "text-9xl"
    "text-base"
    "text-center"
    "text-clip"
    "text-ellipsis"
    "text-justify"
    "text-left"
    "text-lg"
    "text-right"
    "text-sm"
    "text-xl"
    "text-xs"
    "tracking-normal"
    "tracking-tight"
    "tracking-tighter"
    "tracking-wide"
    "tracking-wider"
    "tracking-widest"
    "truncate"
    "underline"
    "underline-offset-0"
    "underline-offset-1"
    "underline-offset-2"
    "underline-offset-4"
    "underline-offset-8"
    "underline-offset-auto"
    "uppercase"
    "whitespace-normal"
    "whitespace-nowrap"
    "whitespace-pre"
    "whitespace-pre-line"
    "whitespace-pre-wrap"
    "bg-fixed"
    "bg-local"
    "bg-scroll"
    "bg-clip-border"
    "bg-clip-padding"
    "bg-clip-content"
    "bg-clip-text"
    "bg-origin-border"
    "bg-origin-padding"
    "bg-origin-content"
    "bg-bottom"
    "bg-center"
    "bg-left"
    "bg-left-bottom"
    "bg-left-top"
    "bg-right"
    "bg-right-bottom"
    "bg-right-top"
    "bg-top"
    "bg-repeat"
    "bg-no-repeat"
    "bg-repeat-x"
    "bg-repeat-y"
    "bg-repeat-round"
    "bg-repeat-space"
    "bg-auto"
    "bg-cover"
    "bg-contain"
    "bg-none"
    "bg-gradient-to-t"
    "bg-gradient-to-tr"
    "bg-gradient-to-r"
    "bg-gradient-to-br"
    "bg-gradient-to-b"
    "bg-gradient-to-bl"
    "bg-gradient-to-l"
    "bg-gradient-to-tl"
    "rounded-none"
    "rounded-sm"
    "rounded"
    "rounded-md"
    "rounded-lg"
    "rounded-xl"
    "rounded-2xl"
    "rounded-3xl"
    "rounded-full"
    "rounded-t-none"
    "rounded-t-sm"
    "rounded-t"
    "rounded-t-md"
    "rounded-t-lg"
    "rounded-t-xl"
    "rounded-t-2xl"
    "rounded-t-3xl"
    "rounded-t-full"
    "rounded-r-none"
    "rounded-r-sm"
    "rounded-r"
    "rounded-r-md"
    "rounded-r-lg"
    "rounded-r-xl"
    "rounded-r-2xl"
    "rounded-r-3xl"
    "rounded-r-full"
    "rounded-b-none"
    "rounded-b-sm"
    "rounded-b"
    "rounded-b-md"
    "rounded-b-lg"
    "rounded-b-xl"
    "rounded-b-2xl"
    "rounded-b-3xl"
    "rounded-b-full"
    "rounded-l-none"
    "rounded-l-sm"
    "rounded-l"
    "rounded-l-md"
    "rounded-l-lg"
    "rounded-l-xl"
    "rounded-l-2xl"
    "rounded-l-3xl"
    "rounded-l-full"
    "rounded-tl-none"
    "rounded-tl-sm"
    "rounded-tl"
    "rounded-tl-md"
    "rounded-tl-lg"
    "rounded-tl-xl"
    "rounded-tl-2xl"
    "rounded-tl-3xl"
    "rounded-tl-full"
    "rounded-tr-none"
    "rounded-tr-sm"
    "rounded-tr"
    "rounded-tr-md"
    "rounded-tr-lg"
    "rounded-tr-xl"
    "rounded-tr-2xl"
    "rounded-tr-3xl"
    "rounded-tr-full"
    "rounded-br-none"
    "rounded-br-sm"
    "rounded-br"
    "rounded-br-md"
    "rounded-br-lg"
    "rounded-br-xl"
    "rounded-br-2xl"
    "rounded-br-3xl"
    "rounded-br-full"
    "rounded-bl-none"
    "rounded-bl-sm"
    "rounded-bl"
    "rounded-bl-md"
    "rounded-bl-lg"
    "rounded-bl-xl"
    "rounded-bl-2xl"
    "rounded-bl-3xl"
    "rounded-bl-full"
    "border-0"
    "border-2"
    "border-4"
    "border-8"
    "border"
    "border-x-0"
    "border-x-2"
    "border-x-4"
    "border-x-8"
    "border-x"
    "border-y-0"
    "border-y-2"
    "border-y-4"
    "border-y-8"
    "border-y"
    "border-t-0"
    "border-t-2"
    "border-t-4"
    "border-t-8"
    "border-t"
    "border-r-0"
    "border-r-2"
    "border-r-4"
    "border-r-8"
    "border-r"
    "border-b-0"
    "border-b-2"
    "border-b-4"
    "border-b-8"
    "border-b"
    "border-l-0"
    "border-l-2"
    "border-l-4"
    "border-l-8"
    "border-l"
    "border-solid"
    "border-dashed"
    "border-dotted"
    "border-double"
    "border-hidden"
    "border-none"
    "divide-x-0"
    "divide-x-2"
    "divide-x-4"
    "divide-x-8"
    "divide-x"
    "divide-y-0"
    "divide-y-2"
    "divide-y-4"
    "divide-y-8"
    "divide-y"
    "divide-y-reverse"
    "divide-x-reverse"
    "divide-solid"
    "divide-dashed"
    "divide-dotted"
    "divide-double"
    "divide-none"
    "outline-offset-0"
    "outline-offset-1"
    "outline-offset-2"
    "outline-offset-4"
    "outline-offset-8"
    "outline-none"
    "outline-0"
    "outline-1"
    "outline-2"
    "outline-4"
    "outline-8"
    "outline-dashed"
    "outline-dotted"
    "outline-double"
    "outline-hidden"
    "ring-0"
    "ring-1"
    "ring-2"
    "ring"
    "ring-4"
    "ring-8"
    "ring-inset"
    "ring-offset-0"
    "ring-offset-1"
    "ring-offset-2"
    "ring-offset-4"
    "ring-offset-8"
    "shadow-sm"
    "shadow"
    "shadow-md"
    "shadow-lg"
    "shadow-xl"
    "shadow-2xl"
    "shadow-inner"
    "shadow-none"
    "opacity-0"
    "opacity-5"
    "opacity-10"
    "opacity-20"
    "opacity-25"
    "opacity-30"
    "opacity-40"
    "opacity-50"
    "opacity-60"
    "opacity-70"
    "opacity-75"
    "opacity-80"
    "opacity-90"
    "opacity-95"
    "opacity-100"
    "mix-blend-normal"
    "mix-blend-multiply"
    "mix-blend-screen"
    "mix-blend-overlay"
    "mix-blend-darken"
    "mix-blend-lighten"
    "mix-blend-color-dodge"
    "mix-blend-color-burn"
    "mix-blend-hard-light"
    "mix-blend-soft-light"
    "mix-blend-difference"
    "mix-blend-exclusion"
    "mix-blend-hue"
    "mix-blend-saturation"
    "mix-blend-color"
    "mix-blend-luminosity"
    "bg-blend-normal"
    "bg-blend-multiply"
    "bg-blend-screen"
    "bg-blend-overlay"
    "bg-blend-darken"
    "bg-blend-lighten"
    "bg-blend-color-dodge"
    "bg-blend-color-burn"
    "bg-blend-hard-light"
    "bg-blend-soft-light"
    "bg-blend-difference"
    "bg-blend-exclusion"
    "bg-blend-hue"
    "bg-blend-saturation"
    "bg-blend-color"
    "bg-blend-luminosity"
    "blur-none"
    "blur-sm"
    "blur"
    "blur-md"
    "blur-lg"
    "blur-xl"
    "blur-2xl"
    "blur-3xl"
    "brightness-0"
    "brightness-50"
    "brightness-75"
    "brightness-90"
    "brightness-95"
    "brightness-100"
    "brightness-105"
    "brightness-110"
    "brightness-125"
    "brightness-150"
    "brightness-200"
    "contrast-0"
    "contrast-50"
    "contrast-75"
    "contrast-100"
    "contrast-125"
    "contrast-150"
    "contrast-200"
    "drop-shadow-sm"
    "drop-shadow"
    "drop-shadow-md"
    "drop-shadow-lg"
    "drop-shadow-xl"
    "drop-shadow-2xl"
    "drop-shadow-none"
    "grayscale-0"
    "grayscale"
    "hue-rotate-0"
    "hue-rotate-15"
    "hue-rotate-30"
    "hue-rotate-60"
    "hue-rotate-90"
    "hue-rotate-180"
    "invert-0"
    "invert"
    "saturate-0"
    "saturate-50"
    "saturate-100"
    "saturate-150"
    "saturate-200"
    "sepia-0"
    "sepia"
    "backdrop-blur-none"
    "backdrop-blur-sm"
    "backdrop-blur"
    "backdrop-blur-md"
    "backdrop-blur-lg"
    "backdrop-blur-xl"
    "backdrop-blur-2xl"
    "backdrop-blur-3xl"
    "backdrop-brightness-0"
    "backdrop-brightness-50"
    "backdrop-brightness-75"
    "backdrop-brightness-90"
    "backdrop-brightness-95"
    "backdrop-brightness-100"
    "backdrop-brightness-105"
    "backdrop-brightness-110"
    "backdrop-brightness-125"
    "backdrop-brightness-150"
    "backdrop-brightness-200"
    "backdrop-contrast-0"
    "backdrop-contrast-50"
    "backdrop-contrast-75"
    "backdrop-contrast-100"
    "backdrop-contrast-125"
    "backdrop-contrast-150"
    "backdrop-contrast-200"
    "backdrop-grayscale-0"
    "backdrop-grayscale"
    "backdrop-hue-rotate-0"
    "backdrop-hue-rotate-15"
    "backdrop-hue-rotate-30"
    "backdrop-hue-rotate-60"
    "backdrop-hue-rotate-90"
    "backdrop-hue-rotate-180"
    "backdrop-invert"
    "backdrop-invert-0"
    "backdrop-opacity-0"
    "backdrop-opacity-5"
    "backdrop-opacity-10"
    "backdrop-opacity-20"
    "backdrop-opacity-25"
    "backdrop-opacity-30"
    "backdrop-opacity-40"
    "backdrop-opacity-50"
    "backdrop-opacity-60"
    "backdrop-opacity-70"
    "backdrop-opacity-75"
    "backdrop-opacity-80"
    "backdrop-opacity-90"
    "backdrop-opacity-95"
    "backdrop-opacity-100"
    "backdrop-saturate-0"
    "backdrop-saturate-50"
    "backdrop-saturate-100"
    "backdrop-saturate-150"
    "backdrop-saturate-200"
    "backdrop-sepia-0"
    "backdrop-sepia"
    "border-collapse"
    "border-separate"
    "table-auto"
    "table-fixed"
    "transition-none"
    "transition-all"
    "transition"
    "transition-colors"
    "transition-opacity"
    "transition-shadow"
    "transition-transform"
    "duration-75"
    "duration-100"
    "duration-150"
    "duration-200"
    "duration-300"
    "duration-500"
    "duration-700"
    "duration-1000"
    "ease-linear"
    "ease-in"
    "ease-out"
    "ease-in-out"
    "delay-75"
    "delay-100"
    "delay-150"
    "delay-200"
    "delay-300"
    "delay-500"
    "delay-700"
    "delay-1000"
    "animate-none"
    "animate-spin"
    "animate-ping"
    "scale-0"
    "scale-x-0"
    "scale-y-0"
    "scale-50"
    "scale-x-50"
    "scale-y-50"
    "scale-75"
    "scale-x-75"
    "scale-y-75"
    "scale-90"
    "scale-x-90"
    "scale-y-90"
    "scale-95"
    "scale-x-95"
    "scale-y-95"
    "scale-100"
    "scale-x-100"
    "scale-y-100"
    "scale-105"
    "scale-x-105"
    "scale-y-105"
    "scale-110"
    "scale-x-110"
    "scale-y-110"
    "scale-125"
    "scale-x-125"
    "scale-y-125"
    "scale-150"
    "scale-x-150"
    "scale-y-150"
    "rotate-0"
    "rotate-1"
    "rotate-2"
    "rotate-3"
    "rotate-6"
    "rotate-12"
    "rotate-45"
    "rotate-90"
    "rotate-180"
    "skew-x-0"
    "skew-y-0"
    "skew-x-1"
    "skew-y-1"
    "skew-x-2"
    "skew-y-2"
    "skew-x-3"
    "skew-y-3"
    "skew-x-6"
    "skew-y-6"
    "skew-x-12"
    "skew-y-12"
    "origin-center"
    "origin-top"
    "origin-top-right"
    "origin-right"
    "origin-bottom-right"
    "origin-bottom"
    "origin-bottom-left"
    "origin-left"
    "origin-top-left"
    "appearance-none"
    "cursor-auto"
    "cursor-default"
    "cursor-pointer"
    "cursor-wait"
    "cursor-text"
    "cursor-move"
    "cursor-help"
    "cursor-not-allowed"
    "cursor-none"
    "cursor-context-menu"
    "cursor-progress"
    "cursor-cell"
    "cursor-crosshair"
    "cursor-vertical-text"
    "cursor-alias"
    "cursor-copy"
    "cursor-no-drop"
    "cursor-grab"
    "cursor-grabbing"
    "cursor-all-scroll"
    "cursor-col-resize"
    "cursor-row-resize"
    "cursor-n-resize"
    "cursor-e-resize"
    "cursor-s-resize"
    "cursor-w-resize"
    "cursor-ne-resize"
    "cursor-nw-resize"
    "cursor-se-resize"
    "cursor-sw-resize"
    "cursor-ew-resize"
    "cursor-ns-resize"
    "cursor-nesw-resize"
    "cursor-nwse-resize"
    "cursor-zoom-in"
    "cursor-zoom-out"
    "pointer-events-auto"
    "pointer-events-none"
    "resize-none"
    "resize-x"
    "resize-y"
    "resize"
    "scroll-auto"
    "scroll-smooth"
    "stroke-0"
    "stroke-1"
    "stroke-2"
    "sr-only"
    "not-sr-only"
    "flex-row"
    "flex-row-reverse"
    "flex-row-col"
    "flex-row-col-reverse"
    "flex-wrap"
    "flex-wrap-reverse"
    "flex-wrap-nowrap"
    "flex-1"
    "flex-auto"
    "flex-initial"
    "flex-none"
    "grow"
    "grow-0"
    "shrink"
    "shrink-0"
    "order-1"
    "order-2"
    "order-3"
    "order-4"
    "order-5"
    "order-6"
    "order-7"
    "order-8"
    "order-9"
    "order-10"
    "order-11"
    "order-12"
    "order-first"
    "order-last"
    "order-none"
    "grid-cols-1"
    "grid-cols-2"
    "grid-cols-3"
    "grid-cols-4"
    "grid-cols-5"
    "grid-cols-6"
    "grid-cols-7"
    "grid-cols-8"
    "grid-cols-9"
    "grid-cols-10"
    "grid-cols-11"
    "grid-cols-12"
    "grid-cols-none"
    "col-auto"
    "col-span-1"
    "col-span-2"
    "col-span-3"
    "col-span-4"
    "col-span-5"
    "col-span-6"
    "col-span-7"
    "col-span-8"
    "col-span-9"
    "col-span-10"
    "col-span-11"
    "col-span-12"
    "col-span-full"
    "col-start-1"
    "col-start-2"
    "col-start-3"
    "col-start-4"
    "col-start-5"
    "col-start-6"
    "col-start-7"
    "col-start-8"
    "col-start-9"
    "col-start-10"
    "col-start-11"
    "col-start-12"
    "col-start-13"
    "col-start-auto"
    "col-end-1"
    "col-end-2"
    "col-end-3"
    "col-end-4"
    "col-end-5"
    "col-end-6"
    "col-end-7"
    "col-end-8"
    "col-end-9"
    "col-end-10"
    "col-end-11"
    "col-end-12"
    "col-end-13"
    "col-end-auto"
    "grid-rows-1"
    "grid-rows-2"
    "grid-rows-3"
    "grid-rows-4"
    "grid-rows-5"
    "grid-rows-6"
    "grid-rows-none"
    "row-span-auto"
    "row-span-1"
    "row-span-2"
    "row-span-3"
    "row-span-4"
    "row-span-5"
    "row-span-6"
    "row-span-full"
    "row-start-auto"
    "row-start-1"
    "row-start-2"
    "row-start-3"
    "row-start-4"
    "row-start-5"
    "row-start-6"
    "row-start-7"
    "row-end-1"
    "row-end-2"
    "row-end-3"
    "row-end-4"
    "row-end-5"
    "row-end-6"
    "row-end-auto"
    "grid-flow-row"
    "grid-flow-col"
    "grid-flow-row-dense"
    "grid-flow-col-dense"
    "auto-cols-auto"
    "auto-cols-min"
    "auto-cols-max"
    "auto-cols-fr"
    "auto-rows-auto"
    "auto-rows-min"
    "auto-rows-max"
    "auto-rows-fr"
    "gap-0"
    "gap-x-0"
    "gap-y-0"
    "gap-px"
    "gap-x-px"
    "gap-y-px"
    "gap-0.5"
    "gap-x-0.5"
    "gap-y-0.5"
    "gap-1"
    "gap-x-1"
    "gap-y-1"
    "gap-1.5"
    "gap-x-1.5"
    "gap-y-1.5"
    "gap-2"
    "gap-x-2"
    "gap-y-2"
    "gap-2.5"
    "gap-x-2.5"
    "gap-y-2.5"
    "gap-3"
    "gap-x-3"
    "gap-y-3"
    "gap-3.5"
    "gap-x-3.5"
    "gap-y-3.5"
    "gap-4"
    "gap-x-4"
    "gap-y-4"
    "gap-5"
    "gap-x-5"
    "gap-y-5"
    "gap-6"
    "gap-x-6"
    "gap-y-6"
    "gap-7"
    "gap-x-7"
    "gap-y-7"
    "gap-8"
    "gap-x-8"
    "gap-y-8"
    "gap-9"
    "gap-x-9"
    "gap-y-9"
    "gap-10"
    "gap-x-10"
    "gap-y-10"
    "gap-11"
    "gap-x-11"
    "gap-y-11"
    "gap-12"
    "gap-x-12"
    "gap-y-12"
    "gap-14"
    "gap-x-14"
    "gap-y-14"
    "gap-16"
    "gap-x-16"
    "gap-y-16"
    "gap-20"
    "gap-x-20"
    "gap-y-20"
    "gap-24"
    "gap-x-24"
    "gap-y-24"
    "gap-28"
    "gap-x-28"
    "gap-y-28"
    "gap-32"
    "gap-x-32"
    "gap-y-32"
    "gap-36"
    "gap-x-36"
    "gap-y-36"
    "gap-40"
    "gap-x-40"
    "gap-y-40"
    "gap-44"
    "gap-x-44"
    "gap-y-44"
    "gap-48"
    "gap-x-48"
    "gap-y-48"
    "gap-52"
    "gap-x-52"
    "gap-y-52"
    "gap-56"
    "gap-x-56"
    "gap-y-56"
    "gap-60"
    "gap-x-60"
    "gap-y-60"
    "gap-64"
    "gap-x-64"
    "gap-y-64"
    "gap-72"
    "gap-x-72"
    "gap-y-72"
    "gap-80"
    "gap-x-80"
    "gap-y-80"
    "gap-96"
    "gap-x-96"
    "gap-y-96"
    "justify-start"
    "justify-end"
    "justify-center"
    "justify-between"
    "justify-around"
    "justify-evenly"
    "justify-items-start"
    "justify-items-end"
    "justify-items-center"
    "justify-items-stretch"
    "justify-self-auto"
    "justify-self-start"
    "justify-self-end"
    "justify-self-center"
    "justify-self-stretch"
    "content-start"
    "content-end"
    "content-center"
    "content-between"
    "content-around"
    "content-evenly"
    "content-stretch"
    "items-start"
    "items-end"
    "items-center"
    "items-stretch"
    "items-baseline"
    "place-items-start"
    "place-items-end"
    "place-items-center"
    "place-items-stretch"
    "place-self-auto"
    "place-self-start"
    "place-self-end"
    "place-self-center"
    "place-self-stretch"
    "self-start"
    "self-end"
    "self-center"
    "self-stretch"
    "self-baseline"
    "place-content-start"
    "place-content-end"
    "place-content-center"
    "place-content-between"
    "place-content-around"
    "place-content-evenly"
    "place-content-stretch"
    "space-x-reverse"
    "space-y-reverse"
    "visible"
    "invisible"
    "z-0"
    "z-10"
    "z-20"
    "z-30"
    "z-40"
    "z-50"
    "z-auto"
    "static"
    "absolute"
    "fixed"
    "relative"
    "sticky"
    "aspect-auto"
    "aspect-square"
    "aspect-video"
    "container"
    "columns-1"
    "columns-2"
    "columns-3"
    "columns-4"
    "columns-5"
    "columns-6"
    "columns-7"
    "columns-8"
    "columns-9"
    "columns-10"
    "columns-11"
    "columns-12"
    "columns-auto"
    "columns-3xs"
    "columns-2xs"
    "columns-xs"
    "columns-sm"
    "columns-md"
    "columns-lg"
    "columns-xl"
    "columns-2xl"
    "columns-3xl"
    "columns-4xl"
    "columns-5xl"
    "columns-6xl"
    "columns-7xl"
    "break-before-auto"
    "break-before-avoid"
    "break-before-all"
    "break-before-avoid-page"
    "break-before-page"
    "break-before-left"
    "break-before-right"
    "break-before-column"

    "break-after-auto"
    "break-after-avoid"
    "break-after-all"
    "break-after-avoid-page"
    "break-after-page"
    "break-after-left"
    "break-after-right"
    "break-after-column"
    "break-inside-auto"
    "break-inside-avoid"
    "break-inside-avoid-page"
    "break-inside-avoid-column"
    "box-decoration-clone"
    "box-decoration-slice"
    "box-border"
    "box-content"
    "block"
    "inline-block"
    "inline"
    "flex"
    "inline-flex"
    "table"
    "inline-table"
    "table-caption"
    "table-cell"
    "table-column"
    "table-column-group"
    "table-footer-group"
    "table-header-group"
    "table-row-group"
    "table-row"
    "flow-root"
    "grid"
    "inline-grid"
    "contents"
    "list-item"
    "hidden"
    "float-left"
    "float-right"
    "float-none"
    "clear-left"
    "clear-right"
    "clear-both"
    "clear-none"
    "isolate"
    "isolation-auto"
    "object-contain"
    "object-cover"
    "object-fill"
    "object-none"
    "object-scale-down"
    "object-bottom"
    "object-center"
    "object-left"
    "object-left-bottom"
    "object-left-top"
    "object-right"
    "object-right-bottom"
    "object-right-top"
    "object-top"
    "overflow-auto"
    "overflow-hidden"
    "overflow-clip"
    "overflow-visible"
    "overflow-scroll"
    "overflow-x-auto"
    "overflow-y-auto"
    "overflow-x-hidden"
    "overflow-y-hidden"
    "overflow-x-clip"
    "overflow-y-clip"
    "overflow-x-visible"
    "overflow-y-visible"
    "overflow-x-scroll"
    "overflow-y-scroll"
    "overscroll-auto"
    "overscroll-contain"
    "overscroll-none"
    "overscroll-y-auto"
    "overscroll-y-contain"
    "overscroll-y-none"
    "overscroll-x-auto"
    "overscroll-x-contain"
    "overscroll-x-none"
    "col"
    )
  "List of tailwind css keys that do not have any suffix")

(defvar company-tailwindcss--keys-with-color-suffix
  '("decoration"
    "fill"
    "stroke"
    "caret"
    "accent"
    "text"
    "bg"
    "border"
    "from"
    "via"
    "to"
    "border-x"
    "border-y"
    "border-t"
    "border-r"
    "border-b"
    "border-l"
    "outline"
    "ring"
    "ring-offset"
    "shadow"
    "snap-start"
    "snap-end"
    "snap-center"
    "snap-align-none"
    "snap-normal"
    "snap-always"
    "snap-none"
    "snap-x"
    "snap-y"
    "snap-both"
    "snap-mandatory"
    "snap-proximity"
    "touch-auto"
    "touch-none"
    "touch-pan-x"
    "touch-pan-left"
    "touch-pan-right"
    "touch-pan-y"
    "touch-pan-up"
    "touch-pan-down"
    "touch-pinch-zoom"
    "touch-manipulation"
    "select-none"
    "select-text"
    "select-all"
    "select-auto"
    "will-change-auto"
    "will-change-scroll"
    "will-change-contents"
    "will-change-transform"
    )
  "List of tailwind css keys that have a color suffix")

(defvar company-tailwindcss--dedupe-prefixes
  `(
    "snap-" "basis-" "select-" "will-change-"
    ("flex-row" "flex-col")
    ("flex-wrap" "flex-nowrap")
    ("flex-1" "flex-auto" "flex-initial" "flex-none")
    ("grow" "shrink")
    "order-"
    "grid-cols"
    "col-start-"
    "col-end-"
    ("col-span" "col-auto")
    "grid-rows"
    "row-start-"
    "row-end-"
    ("row-span" "row-auto")
    "grid-flow"
    "auto-cols"
    "auto-rows"
    "gap-x"
    "gap-y"
    "gap-"
    "justify-items"
    "justify-self"
    "justify-"
    "content-"
    "items-"
    "self-"
    "place-content"
    "place-items"
    "place-self"
    "pt-" "pr-" "pl-" "pb-" "px-" "py-"
    "mt-" "mr-" "ml-" "mb-" "mx-" "my-"
    "p-" "m-"
    "space-x"
    "space-y"
    "w-"
    "h-"
    "min-w-"
    "min-h-"
    "max-w-"
    "max-h-"
    "font-"
    ("antialiased" "subpixel-antialiased")
    ("italic" "not-italic")
    "font-"
    "text-"
    "tracking-"
    "leading-"
    ("list-inside" "list-outside")
    "list-"
    ("normal-nums" "ordinal" "slashed-zero" "lining-nums" "oldstyle-nums" "proportional-nums" "tabular-nums" "diagonal-fractions" "stacked-fractions")
    ,(--map (concat "text-" it) company-tailwindcss--color-categories)
    "text-"
    ,(--map (concat "decoration-" it) company-tailwindcss--color-categories)
    ("decoration-solid" "decoration-double" "decoration-dotted" "decoration-dashed" "decoration-wavy")
    ("decoration-")
    "underline-offset-"
    ("underline" "overline" "line-through" "no-underline")
    ("uppercase" "lowercase" "capitalize" "normal-case")
    ("truncate" "text-ellipsis" "text-clip")
    "indent-"
    "align-"
    "whitespace-"
    "break-"
    "content-none"
    ("bg-fixed" "bg-local" "bg-scroll")
    "bg-clip-"
    ,(--map (concat "bg-" it) company-tailwindcss--color-categories)
    "bg-origin-"
    ("bg-bottom"
     "bg-center"
     "bg-left"
     "bg-left-bottom"
     "bg-left-top"
     "bg-right"
     "bg-right-bottom"
     "bg-right-top"
     "bg-top")
    ("bg-repeat" "bg-no-repeat")
    ("bg-auto" "bg-cover" "bg-contain")
    ("bg-none" "bg-gradient")
    "from-"
    "to-"
    "via-"
    "rounded-"
    "border-x-"
    "border-y-"
    "border-l-"
    "border-r-"
    "border-b-"
    "border-t-"
    ,(--map (concat "border-x-" it) company-tailwindcss--color-categories)
    ,(--map (concat "border-y-" it) company-tailwindcss--color-categories)
    ,(--map (concat "border-l-" it) company-tailwindcss--color-categories)
    ,(--map (concat "border-r-" it) company-tailwindcss--color-categories)
    ,(--map (concat "border-b-" it) company-tailwindcss--color-categories)
    ,(--map (concat "border-t-" it) company-tailwindcss--color-categories)
    ,(--map (concat "border-" it) company-tailwindcss--color-categories)
    ("border-solid"
     "border-dashed"
     "border-dotted"
     "border-double"
     "border-hidden"
     "border-none")
    "border"
    "divide-x"
    "divide-y"
    ,(--map (concat "divide-" it) company-tailwindcss--color-categories)
    ("divide-solid"
     "divide-dashed"
     "divide-dotted"
     "divide-double"
     "divide-hidden"
     "divide-none")
    ,(--map (concat "outline-" it) company-tailwindcss--color-categories)
    ("outline-solid"
     "outline-dashed"
     "outline-dotted"
     "outline-double"
     "outline-hidden"
     "outline-none")
    "outline-offset"
    "outline-"
    ,(--map (concat "ring-" it) company-tailwindcss--color-categories)
    ,(--map (concat "ring-offset-" it) company-tailwindcss--color-categories)
    "ring-offset"
    "ring"
    ,(--map (concat "shadow-" it) company-tailwindcss--color-categories)
    "shadow"
    "opacity"
    "mix-blend-"
    "bg-blend-"
    "blur"
    "brightness"
    "contrast"
    "drop-shadow"
    "grayscale"
    "hue-rotate"
    "invert"
    "saturate"
    "sepia"
    "backdrop-blur"
    "backdrop-brightness"
    "backdrop-contrast"
    "backdrop-grayscale"
    "backdrop-hue-rotate"
    "backdrop-invert"
    "backdrop-opacity"
    "backdrop-saturate"
    "backdrop-sepia"
    ("border-collapse" "border-separate")
    ("table-auto" "table-fixed")
    )
  "Prefixes used to dedupe tailwind classes")

(defvar company-tailwindcss-prefix-sort-weight
  '(
    "p-"
    "m-"
    "pr-"
    "pl-"
    "pb-"
    "pt-"
    "mr-"
    "ml-"
    "mb-"
    "mt-")
  "Determines the sorted weight for a given prefix. Anything not matched defaults to string comparison sorting.")

(defun company-tailwindcss--dedupe-prefix-for-class (full-class)
  (-let [(class . modifiers) (reverse (s-split ":" full-class))]
    (-->
     (cl-loop for prefix in company-tailwindcss--dedupe-prefixes
              until
              (if (listp prefix)
                  (--find (s-prefix-p it class) prefix)
                (s-prefix-p prefix class)) 
              finally return prefix
              )
     (s-join ":"
             (reverse
              (cons
               (if (listp it) (car it) it)
               modifiers))))))


(defvar company-tailwindcss--color-categories
  '(
    "inherit"
    "current"
    "transparent"
    "black"
    "white"
    "amber"
    "blue"
    "cyan"
    "emerald"
    "fuchsia"
    "gray"
    "green"
    "indigo"
    "lime"
    "neutral"
    "orange"
    "pink"
    "purple"
    "red"
    "rose"
    "sky"
    "slate"
    "stone"
    "teal"
    "violet"
    "yellow"
    "zinc"
    )
  "List of tailwind color suffixes")
(defvar company-tailwindcss--colors
  '(
    "inherit"
    "current"
    "transparent"
    "black-50"
    "black-100"
    "black-200"
    "black-300"
    "black-400"
    "black-500"
    "black-600"
    "black-700"
    "black-800"
    "black-900"
    "white-50"
    "white-100"
    "white-200"
    "white-300"
    "white-400"
    "white-500"
    "white-600"
    "white-700"
    "white-800"
    "white-900"
    "amber-50"
    "amber-100"
    "amber-200"
    "amber-300"
    "amber-400"
    "amber-500"
    "amber-600"
    "amber-700"
    "amber-800"
    "amber-900"
    "blue-50"
    "blue-100"
    "blue-200"
    "blue-300"
    "blue-400"
    "blue-500"
    "blue-600"
    "blue-700"
    "blue-800"
    "blue-900"
    "cyan-50"
    "cyan-100"
    "cyan-200"
    "cyan-300"
    "cyan-400"
    "cyan-500"
    "cyan-600"
    "cyan-700"
    "cyan-800"
    "cyan-900"
    "emerald-50"
    "emerald-100"
    "emerald-200"
    "emerald-300"
    "emerald-400"
    "emerald-500"
    "emerald-600"
    "emerald-700"
    "emerald-800"
    "emerald-900"
    "fuchsia-50"
    "fuchsia-100"
    "fuchsia-200"
    "fuchsia-300"
    "fuchsia-400"
    "fuchsia-500"
    "fuchsia-600"
    "fuchsia-700"
    "fuchsia-800"
    "fuchsia-900"
    "gray-50"
    "gray-100"
    "gray-200"
    "gray-300"
    "gray-400"
    "gray-500"
    "gray-600"
    "gray-700"
    "gray-800"
    "gray-900"
    "green-50"
    "green-100"
    "green-200"
    "green-300"
    "green-400"
    "green-500"
    "green-600"
    "green-700"
    "green-800"
    "green-900"
    "indigo-50"
    "indigo-100"
    "indigo-200"
    "indigo-300"
    "indigo-400"
    "indigo-500"
    "indigo-600"
    "indigo-700"
    "indigo-800"
    "indigo-900"
    "lime-50"
    "lime-100"
    "lime-200"
    "lime-300"
    "lime-400"
    "lime-500"
    "lime-600"
    "lime-700"
    "lime-800"
    "lime-900"
    "neutral-50"
    "neutral-100"
    "neutral-200"
    "neutral-300"
    "neutral-400"
    "neutral-500"
    "neutral-600"
    "neutral-700"
    "neutral-800"
    "neutral-900"
    "orange-50"
    "orange-100"
    "orange-200"
    "orange-300"
    "orange-400"
    "orange-500"
    "orange-600"
    "orange-700"
    "orange-800"
    "orange-900"
    "pink-50"
    "pink-100"
    "pink-200"
    "pink-300"
    "pink-400"
    "pink-500"
    "pink-600"
    "pink-700"
    "pink-800"
    "pink-900"
    "purple-50"
    "purple-100"
    "purple-200"
    "purple-300"
    "purple-400"
    "purple-500"
    "purple-600"
    "purple-700"
    "purple-800"
    "purple-900"
    "red-50"
    "red-100"
    "red-200"
    "red-300"
    "red-400"
    "red-500"
    "red-600"
    "red-700"
    "red-800"
    "red-900"
    "rose-50"
    "rose-100"
    "rose-200"
    "rose-300"
    "rose-400"
    "rose-500"
    "rose-600"
    "rose-700"
    "rose-800"
    "rose-900"
    "sky-50"
    "sky-100"
    "sky-200"
    "sky-300"
    "sky-400"
    "sky-500"
    "sky-600"
    "sky-700"
    "sky-800"
    "sky-900"
    "slate-50"
    "slate-100"
    "slate-200"
    "slate-300"
    "slate-400"
    "slate-500"
    "slate-600"
    "slate-700"
    "slate-800"
    "slate-900"
    "stone-50"
    "stone-100"
    "stone-200"
    "stone-300"
    "stone-400"
    "stone-500"
    "stone-600"
    "stone-700"
    "stone-800"
    "stone-900"
    "teal-50"
    "teal-100"
    "teal-200"
    "teal-300"
    "teal-400"
    "teal-500"
    "teal-600"
    "teal-700"
    "teal-800"
    "teal-900"
    "violet-50"
    "violet-100"
    "violet-200"
    "violet-300"
    "violet-400"
    "violet-500"
    "violet-600"
    "violet-700"
    "violet-800"
    "violet-900"
    "yellow-50"
    "yellow-100"
    "yellow-200"
    "yellow-300"
    "yellow-400"
    "yellow-500"
    "yellow-600"
    "yellow-700"
    "yellow-800"
    "yellow-900"
    "zinc-50"
    "zinc-100"
    "zinc-200"
    "zinc-300"
    "zinc-400"
    "zinc-500"
    "zinc-600"
    "zinc-700"
    "zinc-800"
    "zinc-900"
    )
  "List of tailwind color suffixes")

(defvar company-tailwindcss--dimensions
  '(
    "auto"
   "-0"
   "-px"
   "-0.5"
   "-1"
   "-1.5"
   "-2"
   "-2.5"
   "-3"
   "-3.5"
   "-4"
   "-5"
   "-6"
   "-7"
   "-8"
   "-9"
   "-10"
   "-11"
   "-12"
   "-14"
   "-16"
   "-20"
   "-24"
   "-28"
   "-32"
   "-36"
   "-40"
   "-44"
   "-48"
   "-52"
   "-56"
   "-60"
   "-64"
   "-72"
   "-80"
   "-96"
   "-auto"
   "-1/2"
   "-1/3"
   "-2/3"
   "-1/4"
   "-2/4"
   "-3/4"
   "-1/5"
   "-2/5"
   "-3/5"
   "-4/5"
   "-1/6"
   "-2/6"
   "-3/6"
   "-4/6"
   "-5/6"
   "-full"
   "-screen"
   "-min"
   "-max"
   "-fit")
  "List of tailwind dimensions")

(defvar company-tailwindcss--modifiers
  '(
    "hover"
    "2xl"
    "active"
    "after"
    "autofill"
    "before"
    "checked"
    "dark"
    "default"
    "disabled"
    "empty"
    "even"
    "file"
    "first"
    "first-letter"
    "first-line"
    "first-of-type"
    "focus"
    "focus-visible"
    "focus-within"
    "in-range"
    "indeterminate"
    "invalid"
    "landscape"
    "last"
    "last-of-type"
    "lg"
    "ltr"
    "marker"
    "md"
    "motion-reduce"
    "motion-safe"
    "odd"
    "only"
    "only-of-type"
    "open"
    "out-of-range"
    "placeholder"
    "placeholder-shown"
    "portrait"
    "print"
    "read-only"
    "required"
    "rtl"
    "selection"
    "sm"
    "target"
    "valid"
    "visited"
    "xl")
  "List of tailwind modifiers")

(defun company-tailwindcss--completions-for-prefix (prefix)
  "Return a list of completions for PREFIX."
  (append
   (->> company-tailwindcss--modifiers
        (--filter (s-prefix-p prefix it))
        (--map (concat it ":")))
   (->> company-tailwindcss--keys-no-suffix
        (--filter (s-prefix-p prefix it)))
   (->> company-tailwindcss--keys-with-dimension-suffix
        (--map (-as-> it prefix
                      (->> company-tailwindcss--dimensions
                           (--map (concat prefix it))
                           )))
        (-flatten-n 1)
        (--filter (or (s-prefix-p prefix it)
                      (s-prefix-p it prefix))))
   (->> company-tailwindcss--keys-with-color-suffix
        (--map (-as-> it prefix
                      (--map (concat prefix "-" it) company-tailwindcss--colors)))
        (-flatten-n 1)
        (--filter (or (s-prefix-p prefix it)
                      (s-prefix-p it prefix))))
   nil))

(defun company-tailwindcss--in-string-p ()
  (or (get-text-property (point) 'tag-attr)
      (eq (get-text-property (point) 'part-token) 'string)))

(defun company-tailwindcss--sort (lhs rhs)
  (-let* (
          (lhs-prefix (car (reverse (s-split ":" (company-tailwindcss--dedupe-prefix-for-class lhs)))))
          (rhs-prefix (car (reverse (s-split ":" (company-tailwindcss--dedupe-prefix-for-class rhs)))))
          (size (length company-tailwindcss-prefix-sort-weight))
          (lhs-weight (-some--> (--find-index (string= lhs-prefix it) company-tailwindcss-prefix-sort-weight)
                        (+ (- size it) 10)))
          (rhs-weight (-some--> (--find-index (string= rhs-prefix it) company-tailwindcss-prefix-sort-weight)
                        (+ (- size it) 10))))
    (if (or lhs-weight rhs-weight)
        (> (or lhs-weight 0) (or rhs-weight 0))
      (string> lhs rhs))))

(defun company-tailwindcss-sort-class-list (&optional target-class)
  (interactive)
  (save-mark-and-excursion
    (let* ((css (company-tailwindcss-dedupe-class-list target-class))
           (non-tailwind (->> css (--filter (not (company-tailwindcss--class-p it)))
                              (-non-nil)
                              (-sort #'string>))))
      (apply #'delete-region (-cons-to-list (company-tailwindcss--class-list-bounds)))
      (funcall indent-line-function)
      (-let ((indent (current-column)))
        (insert (s-chop-suffix "\n" (s-join "" (append 
                                                non-tailwind
                                                (when non-tailwind (list "\n"))
                                                (list
                                                 (funcall (if non-tailwind #'identity #'s-trim)
                                                          (s-join ""
                                                                  (->> css (--filter (company-tailwindcss--class-p it))
                                                                       (-sort #'company-tailwindcss--sort)
                                                                       (-uniq)
                                                                       (--group-by (s-join ":" (cdr (reverse (s-split ":" it)))))
                                                                       (-message)
                                                                       (--sort (company-tailwindcss--sort (car it) (car other)))
                                                                       (--map (concat (s-repeat indent " ") (s-join " " (cdr it)) "\n"))
                                                                       ))))))))
        (apply #'indent-region (-cons-to-list (company-tailwindcss--class-list-bounds))))
      (company-tailwindcss--fix-multiline-js-string))))

(defun company-tailwindcss-dedupe-class-list (&optional target-class)
  (interactive)
  (-let [used-classes (ht)]
    (-some--> target-class
        (company-tailwindcss--dedupe-prefix-for-class it)
      (ht-set used-classes it t))
    (cons target-class
          (cl-loop for class in (company-tailwindcss--class-list)
                   unless (let* ((prefix (or
                                          (company-tailwindcss--dedupe-prefix-for-class class)
                                          class)))
                            (prog1 (ht-get used-classes prefix nil)
                              (ht-set used-classes prefix t)))
                   collect class))))

(defun company-tailwindcss--class-without-parameters (class)
  (-let (((class-name . modifiers) (reverse (split ":" class))))

    )

  )

(defun company-tailwindcss--class-list-bounds ()
  (save-mark-and-excursion
    (when (re-search-backward (rx (any ?\" ?' ?`)) nil t)
      (forward-char 1)
      (cons (point)
            (progn (re-search-forward (rx (any ?\" ?' ?`)))
                   (1- (point)))))))

(defun company-tailwindcss--class-p (class)
  (or
   (--first (s-prefix-p it class) company-tailwindcss--keys-no-suffix)
   (--first (s-prefix-p (concat it "-") class) company-tailwindcss--keys-with-color-suffix)
   (--first (s-prefix-p (concat it "-") class) company-tailwindcss--keys-with-dimension-suffix)
   (--first (s-prefix-p it class) company-tailwindcss--modifiers)))

(defun company-tailwindcss--class-list ()
  (interactive)
  (save-mark-and-excursion
    (-let (((start . end) (company-tailwindcss--class-list-bounds)))
      (when start
        (goto-char start)
        (--filter (not (s-blank-p it))
                  (cl-loop
                   with last = start
                   while (re-search-forward (rx (any ?\" ?' ?` whitespace)) (1+ end) t)
                   collect (prog1 (buffer-substring-no-properties last (1- (point)))
                             (setq last (point)))))))))

(defun company-tailwindcss--subclass-at-point ()
  (let* ((pt (point))
         (start (save-mark-and-excursion (re-search-backward (rx (any ?\" ?\' ?` whitespace ?:)) nil t)
                                         (1+ (point))))
         (end (save-mark-and-excursion
                (goto-char (1+ start))
                (if (> (point) pt) pt
                  (or (re-search-forward (rx (any ?\" ?\' ?` whitespace ?:)) pt t) (goto-char pt))) pt)))
    (s-trim (buffer-substring start end))))

(defun company-tailwindcss--class-at-point ()
  (let* ((pt (point))
         (quote-chars (->> '(?\" ?\') (-map 'char-to-string)))
         (start (save-mark-and-excursion (re-search-backward (rx (any ?\" ?` ?\' whitespace)) nil t)
                                         (1+ (point))))
         (end (save-mark-and-excursion
                (goto-char (1+ start))
                (re-search-forward (rx (any ?\" ?\' ?` whitespace)) nil t)
                (1- (point)))))
    (s-trim (s-chop-suffixes quote-chars (s-chop-prefixes quote-chars (buffer-substring start end))))))

;;;###autoload
(defun company-tailwindcss (command &optional arg &rest ignored)
  "`company-mode' completion backend for tailwind css classes.
Completion only works inside "
  (interactive (list 'interactive))
  (cl-case command
    (interactive (company-begin-backend 'company-tailwindcss))
    (prefix
     (when (or (not company-tailwindcss-complete-only-in-attributes)
               (company-tailwindcss--in-string-p)
               )
       
       (prog1
           (cons
            (or (company-tailwindcss--subclass-at-point) "")
            t))))
    (candidates
     (let* ((split-query (-some--> arg (and (not (s-blank-p it)) it)
                                   (reverse (s-split ":" it))))
            (filter-list (--doto (ht)
                           (cl-loop for item in (s-split ":" (company-tailwindcss--class-at-point))
                                    do (ht-set it (concat item ":") t))))
            (query (s-chop-suffix ":" (or (-some--> split-query (car it)) ""))))
       (->> query
            (company-tailwindcss--completions-for-prefix)
            (--filter (not (ht-get filter-list it)))
            (--map (if (> (length split-query) 1) (concat ":" it) it)))))
    (post-completion
     (if (not (memq (char-before (point)) '(?: ?\ )))
         (progn
           (while (not (memq (char-after (point)) '(?\  ?\n ?\' ?` ?\")))
             (delete-char 1)))
       (while (not (memq (char-after (point)) '(?: ?\ ?\n ?\' ?` ?\")))
         (delete-char 1))
       (when (eq (char-after (point)) ?:)
         (delete-char 1)))
     (when company-tailwindcss-sort-post-completion
       (when (eq (char-before (point)) ?:)
         (progn (re-search-forward (rx (or whitespace ?' ?` ?\")))
                (forward-char -1)))
       (-let [class (company-tailwindcss--class-at-point)]
         (company-tailwindcss-sort-class-list class)
         (forward-char -1)
         (re-search-forward (rx (not (any letter ?:)) (literal class) (not letter)))
         (forward-char -1))
       (unless (eq (char-before (point)) ?:)
         (insert " "))

       ;; deferring to avoid company having issues from recursing 
       (run-at-time nil nil (lambda () (company-begin-backend 'company-tailwindcss)))
       ))
    (sorted t)
    (no-cache nil)))

(defun company-tailwindcss--fix-multiline-js-string ()
  (interactive)
  (save-mark-and-excursion
    (when (eq (get-text-property (point) 'font-lock-face) 'web-mode-javascript-string-face)
      (-let [(start . end) (company-tailwindcss--class-list-bounds)]
        (goto-char (1- start))
        (unless (eq (char-after (point)) ?`)
          (delete-char 1)
          (insert ?`)
          (goto-char end)
          (delete-char 1)
          (insert ?`))))))


(provide 'company-tailwindcss)
;;; company-tailwindcss.el ends here
